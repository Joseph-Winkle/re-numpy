初始化a,b
import numpy as np
a=np.array([10,20,30,40])   # array([10, 20, 30, 40])
b=np.arange(4)              # array([0, 1, 2, 3])

加法:c=a+b   # array([10,21,32,43])
乘法:c=a*b   # array([0,20,60,120])
乘方：c=b**2  # array([0, 1, 4, 9])
三角函数：c=10*np.sin(a)  
          # array([-5.44021111,  9.12945251, -9.88031624,  7.4511316 ])

print(b<3)  
# array([ True,  True,  True, False], dtype=bool)


    以上为一维运算，下面是多行多维度：
初始化：a=np.array([[1,1],[0,1]]) 
       b=np.arange(4).reshape((2,2))
       c_dot = np.dot(a,b)= a.dot(b)，结果都是
       # array([[2, 4],
       #       [2, 3]])


sum(),min(),max()函数
        import numpy as np
        a=np.random.random((2,4))
        print(a)
        # array([[ 0.94692159,  0.20821798,  0.35339414,  0.2805278 ],
        #       [ 0.04836775,  0.04023552,  0.44091941,  0.21665268]])在第二行中对a的操作是令a中生成一个2行4列的矩阵，且每一元素均是来自从0到1的随机数。 在这个随机生成的矩阵中，我们可以对元素进行求和以及寻找极值的操作
        
        np.sum(a)   # 4.4043622002745959
        np.min(a)   # 0.23651223533671784
        np.max(a)   # 0.90438450240606416
        
        如果你需要对行或者列进行查找运算，就需要在上述代码中为 axis 进行赋值。 当axis的值为0的时候，将会以列作为查找单元， 当axis的值为1的时候，将会以行作为查找单元。
        print("sum =",np.sum(a,axis=1))
        # sum = [ 1.96877324  2.43558896]

        print("min =",np.min(a,axis=0))
        # min = [ 0.23651224  0.41900661  0.36603285  0.46456022]

        print("max =",np.max(a,axis=1))
        # max = [ 0.84869417  0.9043845 ]
后接2
